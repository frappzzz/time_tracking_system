from aiogram import Bot, Dispatcher, F, types, Router
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums.parse_mode import ParseMode
import asyncio
from aiogram.types import FSInputFile, BufferedInputFile
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
import requests
from datetime import datetime, timedelta
import config
import json
from typing import Optional
import io
import matplotlib.pyplot as plt

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.TG_BOT_TOKEN)
Disp = Dispatcher()
router = Router()
Disp.include_router(router)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
url = "http://127.0.0.1:5000"
headers = {config.FASTAPI_KEY_NAME: config.FASTAPI_TOKEN}

def seconds_to_hours_minutes(seconds):
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    return f"{hours} —á. {minutes} –º–∏–Ω."
# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class States(StatesGroup):
    auth = State()
    mainmenu = State()
    in_task = State()
    create_category = State()
plt.style.use('dark_background')  # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
plt.rcParams['font.family'] = 'Cascadia Code'  # –®—Ä–∏—Ñ—Ç Cascadia Code
plt.rcParams['font.size'] = 12  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞

async def create_pie_chart(data: dict, date_str: str):
    categories = list(data.keys())
    time_seconds = list(data.values())

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–µ–∫—É–Ω–¥—ã –≤ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
    time_hours_minutes = [f"{int(seconds // 3600)} —á. {int((seconds % 3600) // 60)} –º–∏–Ω." for seconds in time_seconds]

    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å –¥–≤—É–º—è –æ–±–ª–∞—Å—Ç—è–º–∏: —Å–ª–µ–≤–∞ —Ç–µ–∫—Å—Ç, —Å–ø—Ä–∞–≤–∞ –¥–∏–∞–≥—Ä–∞–º–º–∞
    fig, (ax_text, ax_pie) = plt.subplots(1, 2, figsize=(12, 6), gridspec_kw={'width_ratios': [1, 2]})

    # –û—Ç–∫–ª—é—á–∞–µ–º –æ—Å–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏
    ax_text.axis('off')

    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    text_content = "\n".join([f"{cat}: {time}" for cat, time in zip(categories, time_hours_minutes)])
    ax_text.text(0.1, 0.5, text_content, fontsize=12, va='center', ha='left', color='white')

    # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
    colors = plt.cm.viridis(range(len(categories)))  # –¶–≤–µ—Ç–∞ –∏–∑ —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–Ω–æ–π –ø–∞–ª–∏—Ç—Ä—ã
    wedges, texts, autotexts = ax_pie.pie(
        time_seconds,
        labels=categories,
        autopct='%1.1f%%',
        startangle=140,
        colors=colors,
        textprops={'color': 'white'}  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã
    ax_pie.set_title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ {date_str}", color='white', fontsize=14)
    ax_pie.axis('equal')  # –ß—Ç–æ–±—ã –¥–∏–∞–≥—Ä–∞–º–º–∞ –±—ã–ª–∞ –∫—Ä—É–≥–ª–æ–π

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å –¥–ª—è —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    for wedge in wedges:
        wedge.set_edgecolor('black')  # –ß–µ—Ä–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å–µ–∫—Ç–æ—Ä–æ–≤
        wedge.set_linewidth(1.5)  # –¢–æ–ª—â–∏–Ω–∞ –≥—Ä–∞–Ω–∏—Ü

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –≤ –±—É—Ñ–µ—Ä
    buf = io.BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight', facecolor='#1e1e1e')  # –¢–µ–º–Ω—ã–π —Ñ–æ–Ω
    buf.seek(0)
    plt.close()

    return buf
# –ö–æ–º–∞–Ω–¥–∞ /start
@Disp.message(StateFilter(None), Command('start'))
async def starting(sms: types.Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        req = requests.get(f"{url}/check_id_user_tg/{sms.from_user.id}", headers=headers)
        if req.status_code == 404:
            await bot.send_message(sms.from_user.id, "–ü—Ä–∏–≤–µ—Ç!\n–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ: /auth {code}.")
        elif req.status_code == 200:
            await bot.send_message(sms.from_user.id, "–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!")
            id_user = \
            json.loads(requests.get(f"{url}/get_id_user_by_id_user_tg/{sms.from_user.id}", headers=headers).text)[
                'id_user']
            await state.update_data(id_user=id_user)
            await show_guide(sms.from_user.id)
            await show_main_menu(sms.from_user.id)
            await state.set_state(States.mainmenu)
        else:
            await bot.send_message(sms.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    except Exception as e:
        await bot.send_message(sms.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


# –ö–æ–º–∞–Ω–¥–∞ /auth
@Disp.message(StateFilter(None), Command('auth'))
async def auth_with_code(sms: types.Message, state: FSMContext):
    try:
        code = sms.text.split()[1]
        check_code = requests.get(f"{url}/check_auth_key/{code}", headers=headers)
        if check_code.status_code == 200:
            auth_user = requests.post(f"{url}/auth_user/?auth_key={code}&id_user_tg={sms.from_user.id}",
                                      headers=headers)
            if auth_user.status_code == 200:
                id_user = \
                json.loads(requests.get(f"{url}/get_id_user_by_id_user_tg/{sms.from_user.id}", headers=headers).text)[
                    'id_user']
                await state.update_data(id_user=id_user)
                await state.set_state(States.mainmenu)
                await bot.send_message(sms.from_user.id, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
                await show_guide(sms.from_user.id)
                await show_main_menu(sms.from_user.id)
            else:
                await bot.send_message(sms.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            await bot.send_message(sms.from_user.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except IndexError:
        await bot.send_message(sms.from_user.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /auth {code}.")
    except Exception as e:
        await bot.send_message(sms.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –ü–æ–∫–∞–∑ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
async def show_guide(user_id: int):
    guide_text = (
        "üìö –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/auth {code} - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n"
        "/start_task {category} - –ù–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π. –ï—Å–ª–∏ –µ–µ –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–∏—Ç—Å—è –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è\n"
        "/start_task - –ù–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É, –¥–∞–ª–µ–µ –≤—ã–≤–µ–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç, —Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
        "/stop_task - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/today_stats - –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å\n"
        "/stats {dd.mm.yyyy} - –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å.\n–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: /stats 21.02.2025\n"
        "/stats_pie_chart {dd.mm.yyyy} - –í—ã–≤–æ–¥ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –∑–∞ –¥–µ–Ω—å.\n–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: /stats_pie_chart 21.02.2025\n"
        "/help - –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."
    )
    await bot.send_message(user_id, guide_text)


# –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_main_menu(user_id: int):
    builder = ReplyKeyboardBuilder()
    builder.button(text="–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
    builder.button(text="–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    builder.adjust(2)
    await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=builder.as_markup(resize_keyboard=True))

@Disp.message(StateFilter(States.mainmenu), Command('help'))
async def helper(sms: types.Message, state: FSMContext):
    await show_guide(sms.from_user.id)
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
@Disp.message(States.mainmenu, F.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
@Disp.message(States.mainmenu, Command('start_task'))
async def start_task_handler(sms: types.Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        id_user = user_data.get("id_user")

        if len(sms.text.split()) == 1 or sms.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É":
            categories = requests.get(f"{url}/get_categories_by_id_user/{id_user}", headers=headers)
            if categories.status_code == 200:
                categories_list = categories.json()
                if 'detail' not in categories_list:
                    await state.update_data(categories=categories_list, current_page=0)
                    await show_categories_page(sms.from_user.id, state)
                else:
                    await bot.send_message(sms.from_user.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
                    await state.set_state(States.create_category)
            else:
                await bot.send_message(sms.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        else:
            name_category = sms.text.split(maxsplit=1)[1]
            await start_task_flow(sms.from_user.id, name_category, state)
    except Exception as e:
        await bot.send_message(sms.from_user.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@Disp.message(States.mainmenu, F.text == "–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def create_category_handler(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(States.create_category)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@Disp.message(States.create_category)
async def process_category_creation_handler(message: types.Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        id_user = user_data.get("id_user")
        name_category = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        check = requests.get(
            f"{url}/check_category/",
            json={"id_user": id_user, "name_category": name_category},
            headers=headers
        )

        if check.status_code != 200:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚ùå")
            return

        if check.json()['exists']:
            await message.answer("‚ö†Ô∏è –≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        response = requests.post(
            f"{url}/add_category/",
            json={"id_user": id_user, "name_category": name_category},
            headers=headers
        )

        if response.status_code == 200:
            await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{name_category}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            await state.set_state(States.mainmenu)
            await show_main_menu(message.from_user.id)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚ùå")

    except Exception as e:
        await message.answer(f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏
async def start_task_flow(user_id: int, name_category: str, state: FSMContext):
    user_data = await state.get_data()
    id_user = user_data.get("id_user")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ API
    response = requests.post(
        f"{url}/start_task/",
        json={"id_user": id_user, "name_category": name_category},
        headers=headers
    )

    if response.status_code == 200:
        id_task = response.json().get("id_task")
        await state.update_data(current_task_id=id_task)
        await state.set_state(States.in_task)
        await bot.send_message(
            user_id,
            f"‚è≥ –ó–∞–¥–∞—á–∞ '{name_category}' –Ω–∞—á–∞—Ç–∞!\n"
            f"–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop_task"
        )
    else:
        await bot.send_message(user_id, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É")


# –ü–æ–∫–∞–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
async def show_categories_page(user_id: int, state: FSMContext, message: Optional[types.Message] = None):
    user_data = await state.get_data()
    categories_list = user_data.get("categories", [])
    current_page = user_data.get("current_page", 0)

    start_index = current_page * config.TG_CATEGORIES_PER_PAGE
    end_index = start_index + config.TG_CATEGORIES_PER_PAGE
    categories_page = categories_list[start_index:end_index]

    builder = InlineKeyboardBuilder()
    for category in categories_page:
        builder.button(
            text=category["name_category"],
            callback_data=f"start_task_{category['name_category']}"
        )

    if current_page > 0:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_page")
    if end_index < len(categories_list):
        builder.button(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="next_page")

    builder.adjust(2)

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    if message:
        await message.edit_text(text=text, reply_markup=builder.as_markup())
    else:
        sent_message = await bot.send_message(user_id, text, reply_markup=builder.as_markup())
        await state.update_data(message_id=sent_message.message_id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
@Disp.callback_query(F.data == "prev_page")
async def prev_page(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    current_page = user_data.get("current_page", 0)
    if current_page > 0:
        await state.update_data(current_page=current_page - 1)
        await show_categories_page(callback.from_user.id, state, message=callback.message)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
@Disp.callback_query(F.data == "next_page")
async def next_page(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    current_page = user_data.get("current_page", 0)
    categories_list = user_data.get("categories", [])
    if (current_page + 1) * config.TG_CATEGORIES_PER_PAGE < len(categories_list):
        await state.update_data(current_page=current_page + 1)
        await show_categories_page(callback.from_user.id, state, message=callback.message)
    await callback.answer()


@Disp.callback_query(F.data.startswith("start_task_"))
async def start_task_from_button(callback: types.CallbackQuery, state: FSMContext):
    name_category = callback.data.split("_")[2]
    user_data = await state.get_data()
    id_user = user_data.get("id_user")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ API
    response = requests.post(
        f"{url}/start_task/",
        json={"id_user": id_user, "name_category": name_category},
        headers=headers
    )

    if response.status_code == 200:
        id_task = response.json().get("id_task")
        await state.update_data(current_task_id=id_task)
        await state.set_state(States.in_task)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—á–∞–ª–µ –∑–∞–¥–∞—á–∏
        await callback.message.edit_text(
            text=f"‚è≥ –ó–∞–¥–∞—á–∞ '{name_category}' –Ω–∞—á–∞—Ç–∞!\n–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop_task",
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏, —Ç–∞–∫ –∫–∞–∫ –∑–∞–¥–∞—á–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞
        )
    else:
        await callback.message.edit_text(
            text="üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É",
            reply_markup=None
        )
    await callback.answer()


# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏
@Disp.message(States.in_task, Command('stop_task'))
async def stop_task_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    task_id = user_data.get("current_task_id")

    if not task_id:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        return

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ API
    response = requests.post(
        f"{url}/stop_task/{task_id}",
        headers=headers
    )

    if response.status_code == 200:
        await message.answer("üõë –ó–∞–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        await state.set_state(States.mainmenu)
        await state.update_data(current_task_id=None)
        await show_main_menu(message.from_user.id)
    else:
        await message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@Disp.message(States.in_task)
async def handle_other_commands_in_task(message: types.Message):
    await message.answer("–î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–∞ /stop_task")

@Disp.message(States.mainmenu, Command('today_stats'))
async def today_stats_handler(message: types.Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        id_user = user_data.get("id_user")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        stats_seconds = requests.get(f"{url}/today_stats_seconds/{id_user}", headers=headers)
        if stats_seconds.status_code != 200:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ –∑–∞–¥–∞—á
        chronological_stats = requests.get(f"{url}/today_stats_chronological/{id_user}", headers=headers)
        if chronological_stats.status_code != 200:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –∑–∞–¥–∞—á.")
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–µ–∫—É–Ω–¥—ã –≤ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
        stats_dict = stats_seconds.json()
        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å:\n\n"

        # –°–µ–∫—Ü–∏—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        if stats_dict:
            stats_text += "üïí –°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
            for category, seconds in stats_dict.items():
                total_seconds = int(seconds)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
                hours = total_seconds // 3600
                minutes = (total_seconds % 3600) // 60
                stats_text += f"‚ñ´Ô∏è {category}: {hours:02d}:{minutes:02d}\n"
        else:
            stats_text += "‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏\n"

        # –°–µ–∫—Ü–∏—è —Å —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–µ–π
        chronological_list = chronological_stats.json()
        stats_text += "\nüìÖ –•—Ä–æ–Ω–æ–ª–æ–≥–∏—è –∑–∞–¥–∞—á:\n"
        if chronological_list:
            for i, task in enumerate(chronological_list, 1):
                start_time = datetime.fromisoformat(task['start_time'])
                end_time = datetime.fromisoformat(task['end_time']) if task['end_time'] else None

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                start_date_str = start_time.strftime('%d.%m %H:%M')
                if end_time:
                    if start_time.date() == end_time.date():
                        # –ó–∞–¥–∞—á–∞ –Ω–∞—á–∞–ª–∞—Å—å –∏ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –≤ –æ–¥–∏–Ω –¥–µ–Ω—å
                        end_date_str = end_time.strftime('%H:%M')
                    else:
                        # –ó–∞–¥–∞—á–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤—á–µ—Ä–∞, –∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —Å–µ–≥–æ–¥–Ω—è
                        end_date_str = end_time.strftime('%d.%m %H:%M')
                    stats_text += (
                        f"{i}. {task['name_category']}\n"
                        f"   üïë {start_date_str} ‚Äî {end_date_str}\n"
                    )
                else:
                    stats_text += (
                        f"{i}. {task['name_category']}\n"
                        f"   üïë {start_date_str} ‚Äî –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
                    )
        else:
            stats_text += "‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–∞—á–∞—Ö\n"

        await message.answer(stats_text)

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@Disp.message(States.mainmenu, Command('stats'))
async def stats_handler(message: types.Message, state: FSMContext):
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        date_str = message.text.split(maxsplit=1)[1].strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
        try:
            datetime.strptime(date_str, "%d.%m.%Y")
        except ValueError:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 21.02.2024)")
            return

        user_data = await state.get_data()
        id_user = user_data.get("id_user")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await get_stats(id_user, date_str)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = await format_stats_response(stats, date_str)

        await message.answer(response)

    except IndexError:
        await message.answer("üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /stats –î–î.–ú–ú.–ì–ì–ì–ì")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


async def get_stats(id_user: int, date_str: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ API"""
    stats = {}

    # –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    stats_response = requests.get(
        f"{url}/date_stats_seconds/",
        params={"date_user": date_str, "id_user": id_user},
        headers=headers
    )
    if stats_response.status_code == 200:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å–ª–æ–≤–∞—Ä—å
        stats['seconds'] = {item['name_category']: item['total_time_seconds'] for item in stats_response.json()}
    else:
        stats['seconds'] = {}

    # –ó–∞–ø—Ä–æ—Å —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –∑–∞–¥–∞—á
    chrono_response = requests.get(
        f"{url}/date_stats_chronological/",
        params={"date_user": date_str, "id_user": id_user},
        headers=headers
    )
    if chrono_response.status_code == 200:
        stats['chrono'] = chrono_response.json()
    else:
        stats['chrono'] = []

    return stats


async def format_stats_response(stats: dict, date_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    response = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {date_str}\n\n"

    # –°–µ–∫—Ü–∏—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    if stats['seconds'] and isinstance(stats['seconds'], dict):
        response += "üïí –°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
        for category, seconds in stats['seconds'].items():
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–µ–∫—É–Ω–¥—ã –≤ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
            total_seconds = int(seconds)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
            hours = total_seconds // 3600
            minutes = (total_seconds % 3600) // 60
            response += f"‚ñ´Ô∏è {category}: {hours:02d}:{minutes:02d}\n"
    else:
        response += "‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏\n"

    # –°–µ–∫—Ü–∏—è —Å —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–µ–π
    response += "\nüìÖ –•—Ä–æ–Ω–æ–ª–æ–≥–∏—è –∑–∞–¥–∞—á:\n"
    if stats['chrono'] and isinstance(stats['chrono'], list):
        for i, task in enumerate(stats['chrono'], 1):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –≤—ã–≤–æ–¥–∞
            start_time = task['start_time']
            end_time = task['end_time'] if 'end_time' in task else None

            response += (
                f"{i}. {task['name_category']}\n"
                f"   üïë {start_time} ‚Äî {end_time if end_time else '–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'}\n"
            )
    else:
        response += "‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–∞—á–∞—Ö\n"

    return response
@Disp.message(States.mainmenu, Command('stats_pie_chart'))
async def stats_pie_chart_handler(message: types.Message, state: FSMContext):
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        date_str = message.text.split(maxsplit=1)[1].strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
        try:
            datetime.strptime(date_str, "%d.%m.%Y")
        except ValueError:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 21.02.2024)")
            return

        user_data = await state.get_data()
        id_user = user_data.get("id_user")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
        stats_response = requests.get(
            f"{url}/date_stats_pie_chart/",
            params={"date_user": date_str, "id_user": id_user},
            headers=headers
        )

        if stats_response.status_code != 200:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã.")
            return

        stats_data = stats_response.json()
        stats_dict = {item['name_category']: item['total_time_seconds'] for item in stats_data}

        # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        chart_buffer = await create_pie_chart(stats_dict, date_str)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        chart_buffer.seek(0)
        await message.answer_photo(BufferedInputFile(chart_buffer.read(), filename="pie_chart.png"))

    except IndexError:
        await message.answer("üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /stats_pie_chart –î–î.–ú–ú.–ì–ì–ì–ì")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    Disp.run_polling(bot)